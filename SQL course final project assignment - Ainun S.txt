Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 
SELECT COUNT(*)
FROM attribute;
+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

ii. Business table =
SELECT COUNT(*)
FROM Business;
+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

iii. Category table =
SELECT COUNT(*)
FROM Category;
+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

iv. Checkin table =
SELECT COUNT(*)
FROM Checkin;
+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

v. elite_years table =
SELECT COUNT(*)
FROM elite_years;
+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

vi. friend table =
SELECT COUNT(*)
FROM friend;
+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

vii. hours table =
SELECT COUNT(*)
FROM hours;
+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

viii. photo table =
SELECT COUNT(*)
FROM photo;
+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

ix. review table =
SELECT COUNT(*)
FROM review;
+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

x. tip table =
SELECT COUNT(*)
FROM tip;
+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+

xi. user table =
SELECT COUNT(*)
FROM user;
+----------+
| COUNT(*) |
+----------+
|    10000 |
+----------+
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business =
SELECT COUNT(DISTINCT id)
AS 'Total Distinct Records'
FROM business;
+------------------------+
| Total Distinct Records |
+------------------------+
|                  10000 |
+------------------------+

ii. Hours =
SELECT COUNT(DISTINCT business_id)
AS 'Total Distinct Records'
FROM hours;
+------------------------+
| Total Distinct Records |
+------------------------+
|                   1562 |
+------------------------+

iii. Category =
SELECT COUNT(DISTINCT business_id)
AS 'Total Distinct Records'
FROM category;
+------------------------+
| Total Distinct Records |
+------------------------+
|                   2643 |
+------------------------+

iv. Attribute =
SELECT COUNT(DISTINCT business_id)
AS 'Total Distinct Records'
FROM attribute;
+------------------------+
| Total Distinct Records |
+------------------------+
|                   1115 |
+------------------------+

v. Review =
SELECT COUNT(DISTINCT id)		<-- Primary key
AS 'Total Distinct Records'
FROM review;
+------------------------+
| Total Distinct Records |
+------------------------+
|                  10000 |
+------------------------+

SELECT COUNT(DISTINCT business_id)	<-- Foreign key
AS 'Total Distinct Records'
FROM review;
+------------------------+
| Total Distinct Records |
+------------------------+
|                   8090 |
+------------------------+

SELECT COUNT(DISTINCT user_id)		<-- Foreign key
AS 'Total Distinct Records'
FROM review;
+------------------------+
| Total Distinct Records |
+------------------------+
|                   9581 |
+------------------------+

vi. Checkin =
SELECT COUNT(DISTINCT business_id)
AS 'Total Distinct Records'
FROM checkin;
+------------------------+
| Total Distinct Records |
+------------------------+
|                    493 |
+------------------------+

vii. Photo =
SELECT COUNT(DISTINCT id)		<-- Primary key
AS 'Total Distinct Records'
FROM photo;
+------------------------+
| Total Distinct Records |
+------------------------+
|                  10000 |
+------------------------+

SELECT COUNT(DISTINCT business_id)	<-- Foreign key
AS 'Total Distinct Records'
FROM photo;
+------------------------+
| Total Distinct Records |
+------------------------+
|                   6493 |
+------------------------+

viii. Tip =
SELECT COUNT(DISTINCT user_id)		<-- Foreign key
AS 'Total Distinct Records'
FROM tip;
+------------------------+
| Total Distinct Records |
+------------------------+
|                    537 |
+------------------------+

SELECT COUNT(DISTINCT business_id)	<-- Foreign key
AS 'Total Distinct Records'
FROM tip;
+------------------------+
| Total Distinct Records |
+------------------------+
|                   3979 |
+------------------------+

ix. User =
SELECT COUNT(DISTINCT id)
AS 'Total Distinct Records'
FROM user;
+------------------------+
| Total Distinct Records |
+------------------------+
|                  10000 |
+------------------------+

x. Friend =
SELECT COUNT(DISTINCT user_id)
AS 'Total Distinct Records'
FROM friend;
+------------------------+
| Total Distinct Records |
+------------------------+
|                     11 |
+------------------------+

xi. Elite_years =
SELECT COUNT(DISTINCT user_id)
AS 'Total Distinct Records'
FROM elite_years;
+------------------------+
| Total Distinct Records |
+------------------------+
|                   2780 |
+------------------------+

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
+----+------+--------------+---------------+--------+-------+------+------+---------------+----------------+-----------------+--------------------+-----------------+-----------------+-----------------+------------------+-----------------+------------------+-------------------+-------------------+
| id | name | review_count | yelping_since | useful | funny | cool | fans | average_stars | compliment_hot | compliment_more | compliment_profile | compliment_cute | compliment_list | compliment_note | compliment_plain | compliment_cool | compliment_funny | compliment_writer | compliment_photos |
+----+------+--------------+---------------+--------+-------+------+------+---------------+----------------+-----------------+--------------------+-----------------+-----------------+-----------------+------------------+-----------------+------------------+-------------------+-------------------+
+----+------+--------------+---------------+--------+-------+------+------+---------------+----------------+-----------------+--------------------+-----------------+-----------------+-----------------+------------------+-----------------+------------------+-------------------+-------------------+
	
	SQL code used to arrive at answer:
SELECT *
FROM user
WHERE id IS NULL OR
name IS NULL OR
review_count IS NULL OR
yelping_since IS NULL OR
useful IS NULL OR
funny IS NULL OR
cool IS NULL OR
fans IS NULL OR
average_stars IS NULL OR
compliment_hot IS NULL OR
compliment_more IS NULL OR
compliment_profile IS NULL OR
compliment_cute IS NULL OR
compliment_list IS NULL OR
compliment_note IS NULL OR
compliment_plain IS NULL OR
compliment_cool IS NULL OR
compliment_funny IS NULL OR
compliment_writer IS NULL OR
compliment_photos IS NULL;
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 		max: 		avg:
SELECT 
MIN(stars),
MAX(stars),
AVG(stars)
FROM review;
+------------+------------+------------+
| MIN(stars) | MAX(stars) | AVG(stars) |
+------------+------------+------------+
|          1 |          5 |     3.7082 |
+------------+------------+------------+		
	
	ii. Table: Business, Column: Stars
	
		min:		max:		avg:
SELECT 
MIN(stars),
MAX(stars),
AVG(stars)
FROM business;
+------------+------------+------------+
| MIN(stars) | MAX(stars) | AVG(stars) |
+------------+------------+------------+
|        1.0 |        5.0 |     3.6549 |
+------------+------------+------------+		
	
	iii. Table: Tip, Column: Likes
	
		min:		max:		avg:
SELECT 
MIN(likes),
MAX(likes),
AVG(likes)
FROM tip;
+------------+------------+------------+
| MIN(likes) | MAX(likes) | AVG(likes) |
+------------+------------+------------+
|          0 |          2 |     0.0144 |
+------------+------------+------------+		
	
	iv. Table: Checkin, Column: Count
	
		min:		max:		avg:
SELECT 
MIN(count),
MAX(count),
AVG(count)
FROM checkin;		
+------------+------------+------------+
| MIN(count) | MAX(count) | AVG(count) |
+------------+------------+------------+
|          1 |         53 |     1.9414 |
+------------+------------+------------+	
	
	v. Table: User, Column: Review_count
	
		min:		max:		avg:
SELECT 
MIN(Review_count),
MAX(Review_count),
AVG(Review_count)
FROM user;		
+------------+------------+------------+
| MIN(count) | MAX(count) | AVG(count) |
+------------+------------+------------+
|          0 |       2000 |    24.2995 |
+------------+------------+------------+


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

SELECT City, COUNT(review_count) AS total_review
FROM business
GROUP BY City
ORDER BY total_reviews DESC
	
	Copy and Paste the Result Below:

+-----------------+---------------+
| city            | total_review |
+-----------------+---------------+
| Las Vegas       |          1561 |
| Phoenix         |          1001 |
| Toronto         |           985 |
| Scottsdale      |           497 |
| Charlotte       |           468 |
| Pittsburgh      |           353 |
| Montréal        |           337 |
| Mesa            |           304 |
| Henderson       |           274 |
| Tempe           |           261 |
| Edinburgh       |           239 |
| Chandler        |           232 |
| Cleveland       |           189 |
| Gilbert         |           188 |
| Glendale        |           188 |
| Madison         |           176 |
| Mississauga     |           150 |
| Stuttgart       |           141 |
| Peoria          |           105 |
| Markham         |            80 |
| Champaign       |            71 |
| North Las Vegas |            70 |
| North York      |            64 |
| Surprise        |            60 |
| Richmond Hill   |            54 |
+-----------------+---------------+
(Output limit exceeded, 25 of 362 total rows shown)


	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars, 
review_count AS count
FROM business
WHERE city = 'Avon'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------+-------+
| stars | count |
+-------+-------+
|   1.5 |    10 |
|   2.5 |     3 |
|   3.5 |    50 |
|   4.0 |    17 |
|   4.5 |    31 |
|   5.0 |     3 |
+-------+-------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT stars, 
review_count AS count
FROM business
WHERE city = 'Beachwood'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------+-------+
| stars | count |
+-------+-------+
|   2.0 |     8 |
|   2.5 |     3 |
|   3.0 |     3 |
|   3.5 |     3 |
|   4.0 |    69 |
|   4.5 |     3 |
|   5.0 |     4 |
+-------+-------+		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

SELECT name,
id,
review_count
FROM user
ORDER BY review_count DESC
LIMIT 3;
		
	Copy and Paste the Result Below:

+--------+------------------------+--------------+
| name   | id                     | review_count |
+--------+------------------------+--------------+
| Gerald | -G7Zkl1wIWBBmD0KRy_sCw |         2000 |
| Sara   | -3s52C4zL_DHRK0ULG6qtg |         1629 |
| Yuri   | -8lbUNlXVSoXqaRRiHiSNg |         1339 |
+--------+------------------------+--------------+		


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

Based on 2 tables below, we can see that reviews and fans do not necessarily have a positive correlation.
By sorting the table by fans descending, we can see that the users who have the most fans sometimes have fewer review_count than other users.
For example, Gerald posted 2000 reviews and has 253 fans while Amy posted 609 reviews and has 503 fans. 

QUERY:

SELECT name,
id,
fans,
review_count
FROM user
ORDER BY fans DESC

+-----------+------------------------+------+--------------+
| name      | id                     | fans | review_count |
+-----------+------------------------+------+--------------+
| Amy       | -9I98YbNQnLdAmcYfb324Q |  503 |          609 |
| Mimi      | -8EnCioUmDygAbsYZmTeRQ |  497 |          968 |
| Harald    | --2vR0DIsmQ6WfcSzKWigw |  311 |         1153 |
| Gerald    | -G7Zkl1wIWBBmD0KRy_sCw |  253 |         2000 |
| Christine | -0IiMAZI2SsQ7VmyzJjokQ |  173 |          930 |
| Lisa      | -g3XIcCb2b-BD0QBCcq2Sw |  159 |          813 |
| Cat       | -9bbDysuiWeo2VShFJJtcw |  133 |          377 |
| William   | -FZBTkAZEXoP7CYvRV2ZwQ |  126 |         1215 |
| Fran      | -9da1xk7zgnnfO1uTVYGkA |  124 |          862 |
| Lissa     | -lh59ko3dxChBSZ9U7LfUw |  120 |          834 |
| Mark      | -B-QEUESGWHPE_889WJaeg |  115 |          861 |
| Tiffany   | -DmqnhW4Omr3YhmnigaqHg |  111 |          408 |
| bernice   | -cv9PPT7IHux7XUc9dOpkg |  105 |          255 |
| Roanna    | -DFCC64NXgqrxlO8aLU5rg |  104 |         1039 |
| Angela    | -IgKkE8JvYNWeGu8ze4P8Q |  101 |          694 |
| .Hon      | -K2Tcgh2EKX6e6HqqIrBIQ |  101 |         1246 |
| Ben       | -4viTt9UC44lWCFJwleMNQ |   96 |          307 |
| Linda     | -3i9bhfvrM3F1wsC9XIB8g |   89 |          584 |
| Christina | -kLVfaJytOJY2-QdQoCcNQ |   85 |          842 |
| Jessica   | -ePh4Prox7ZXnEBNGKyUEA |   84 |          220 |
| Greg      | -4BEUkLvHQntN6qPfKJP2w |   81 |          408 |
| Nieves    | -C-l8EHSLXtZZVfUAUhsPA |   80 |          178 |
| Sui       | -dw8f7FLaUmWR7bfJ_Yf0w |   78 |          754 |
| Yuri      | -8lbUNlXVSoXqaRRiHiSNg |   76 |         1339 |
| Nicole    | -0zEEaDFIjABtPQni0XlHA |   73 |          161 |
+-----------+------------------------+------+--------------+
(Output limit exceeded, 25 of 10000 total rows shown)


	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: The word "love" has been used 1780 times while the word "hate" has been used only 232 times.

	
	SQL code used to arrive at answer:

SELECT COUNT(*) as count_love
FROM review
WHERE text like '%love%';

+------------+
| count_love |
+------------+
|       1780 |
+------------+

SELECT COUNT(*) as count_hate
FROM review
WHERE text like '%hate%';
+------------+
| count_hate |
+------------+
|        232 |
+------------+


	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

SELECT name,
fans
FROM user
ORDER BY fans DESC
LIMIT 10;
	
	Copy and Paste the Result Below:

+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+

	
		
Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
Category ='Restaurant' City='Edinburgh'

i. Do the two groups you chose to analyze have a different distribution of hours?
Yes, the one are open during business hours for around 11 hours and the other one are open at late night for around 9 hours or less.

+-------+-----------+-------------+----------------------+
| stars | city      | hours       | number_of_businesses |
+-------+-----------+-------------+----------------------+
|   2.0 | Edinburgh | |22:00-3:00 |                    2 |
|   2.0 | Edinburgh | |22:30-3:00 |                    2 |
|   3.5 | Edinburgh | |9:00-18:00 |                    6 |
|   4.0 | Edinburgh | 12:00-22:30 |                    7 |
+-------+-----------+-------------+----------------------+

ii. Do the two groups you chose to analyze have a different number of reviews?
Yes, the businesses in Edinbrugh with stars between 3.0 and 5.0 have more reviews than those with 1.0 - 2.5 stars.        

Group 1 
+-------+-----------+-----------+
| stars | city      | n_reviews |
+-------+-----------+-----------+
|   1.0 | Edinburgh |         4 |
|   1.5 | Edinburgh |        11 |
|   2.0 | Edinburgh |        31 |
|   2.5 | Edinburgh |        43 |
+-------+-----------+-----------+

Group 2: 
+-------+-----------+-----------+
| stars | city      | n_reviews |
+-------+-----------+-----------+
|   3.0 | Edinburgh |       349 |
|   3.5 | Edinburgh |       668 |
|   4.0 | Edinburgh |      1102 |
|   4.5 | Edinburgh |       443 |
|   5.0 | Edinburgh |       141 |
+-------+-----------+-----------+
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

Group 1 = stars between 1.0-2.5
Group 2 = stars between 3.0-5.0
City = 'Edinburgh', Neighborhood = 'New Town'

From the table below, we can see that in the New Town area there are more businesses with stars 3.0-5.0 than those are with stars 1.0-2.5. The majority of businesses are in 4 stars (54 businesses) and there is only a business with 1.5 star.
+-------+-----------+--------------+--------------+
| stars | city      | neighborhood | n_businesses |
+-------+-----------+--------------+--------------+
|   1.5 | Edinburgh | New Town     |          1.0 |
|   2.0 | Edinburgh | New Town     |          7.0 |
|   2.5 | Edinburgh | New Town     |          2.0 |
|   3.0 | Edinburgh | New Town     |          3.0 |
|   3.5 | Edinburgh | New Town     |         15.0 |
|   4.0 | Edinburgh | New Town     |         54.0 |
|   4.5 | Edinburgh | New Town     |         29.0 |
|   5.0 | Edinburgh | New Town     |          9.0 |
+-------+-----------+--------------+--------------+

SQL code used for analysis:
 i.	    
SELECT 
b.stars,
b.city,
SUBSTR(h.hours,-11) AS hours,
COUNT(b.id) number_of_businesses
FROM business b INNER JOIN hours h 
ON b.id = h.business_id
GROUP BY b.stars, b.city, SUBSTR(h.hours,-11)
HAVING b.city ='Edinburgh'
ORDER BY b.stars;

  ii.	Group 1

SELECT 
stars,
city,
SUM(review_count) AS n_reviews
FROM business
GROUP BY stars, city
HAVING city='Edinburgh' AND stars BETWEEN 1.0 AND 2.5; 

    	Group 2: 

SELECT 
stars,
city,
SUM(review_count) AS n_reviews
FROM business
GROUP BY stars, city
HAVING city='Edinburgh' AND stars BETWEEN 3.0 AND 5.0;
     
iii.
SELECT 
stars,
city,
neighborhood,
SUM(id) AS n_businesses
FROM business
GROUP BY stars, neighborhood
HAVING city='Edinburgh' AND neighborhood='New Town'


2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
      The Yelp Datsets has data on 10000 businesses out of which 8480 are open and the remaining 1520 are closed. 
         
ii. Difference 2:
There 4355 businesses that are open have between 4.0 and 5.0 stars. There are 3756 businesses open that have between 2.0 to 3.0 stars.   
+-------+--------------+
| stars | n_businesses |
+-------+--------------+
|   2.0 |          472 |
|   2.5 |          722 |
|   3.0 |         1124 |
|   3.5 |         1483 |
|   4.0 |         1679 |
|   4.5 |         1249 |
|   5.0 |         1427 |
+-------+--------------+
         
SQL code used for analysis:

Difference 1: 

SELECT COUNT(is_open)
FROM business
WHERE is_open = 1

SELECT COUNT(is_open)
FROM business
WHERE is_open = 0

Difference 2:

SELECT
stars,
COUNT(id) AS n_businesses
FROM business
GROUP BY is_open,stars
HAVING is_open = 1 AND stars BETWEEN 2.0 AND 5.0

3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
      Determining the correlation between star rating and number of reviews within a city.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
     From the business table,  I joined data with the categories table to see if star rating of a business category has correlation on number of reviews within the city of Pittsburgh for both open and closed businessess.
iii. Output of your finished dataset:
+------------+-------------------------+-------+--------------+---------+
| city       | category                | stars | review_count | is_open |
+------------+-------------------------+-------+--------------+---------+
| Pittsburgh | Bike Repair/Maintenance |   5.0 |            8 |       1 |
| Pittsburgh | Bikes                   |   5.0 |            8 |       1 |
| Pittsburgh | Fashion                 |   5.0 |            8 |       1 |
| Pittsburgh | Local Services          |   5.0 |            8 |       1 |
| Pittsburgh | Shoe Stores             |   5.0 |            8 |       1 |
| Pittsburgh | Shopping                |   5.0 |            8 |       1 |
| Pittsburgh | Sporting Goods          |   5.0 |            8 |       1 |
| Pittsburgh | Desserts                |   4.5 |           72 |       0 |
| Pittsburgh | Food                    |   4.5 |           72 |       0 |
| Pittsburgh | None                    |   4.0 |           68 |       1 |
| Pittsburgh | Arts & Entertainment    |   3.5 |            7 |       1 |
| Pittsburgh | Music Venues            |   3.5 |            7 |       1 |
| Pittsburgh | Nightlife               |   3.5 |            7 |       1 |
| Pittsburgh | Mexican                 |   3.0 |          103 |       1 |
| Pittsburgh | Tex-Mex                 |   3.0 |          103 |       1 |
| Pittsburgh | Pizza                   |   2.5 |           28 |       1 |
| Pittsburgh | Restaurants             |   2.5 |           28 |       1 |
+------------+-------------------------+-------+--------------+---------+
         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT 
b.city,
c.category, 
b.stars, 
b.review_count, 
b.is_open 
FROM business b LEFT JOIN category c
ON b.id = c.business_id
WHERE b.city ='Pittsburgh'
GROUP BY c.category
ORDER BY b.stars DESC